HTML CODE:
<!DOCTYPE html>
<html>

<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width">
  <title>CALLBACKS</title>
  <link href="style.css" rel="stylesheet" type="text/css" />
</head>

<body>
  Hello world
  <script src="script.js"></script>

  <!--
  This script places a badge on your repl's full-browser view back to your repl's cover
  page. Try various colors for the theme: dark, light, red, orange, yellow, lime, green,
  teal, blue, blurple, magenta, pink!
  -->
  <script src="https://replit.com/public/js/replit-badge-v2.js" theme="dark" position="bottom-right"></script>
</body>

</html>

JS CODE:
// SYNCHRONOUS Programming (actions that initiate and finish one-by-one) i.e. all prompts run one-by-one
/* let a = prompt("What is your name?");
let b = prompt("What is your age?");
let c = prompt("What is your fav color?");
console.log(a + " is " + b + " years old and his fav color is " + c);
*/

// ASYNCHRONOUS Programming (actions that we initiate now and they finish later) i.e. setTimeout
/* console.log("START");
setTimeout(function () {
  console.log("Hey, I am good");
},3000)
console.log("END");
*/
// here first console prints START, then since setTimeout is asynchronous, it got scheduled, then console prints END and after 3s console prints Hey, I am good

// CALLBACK FUNCTIONS (you give a function which gets executed when action gets completed)
// function passed into another function as an argument that is invoked inside outer function to complete an action
// A callback is a function passed as an argument to another function, this technique allows a function to call another function, callback function can run after another function has finished

/* function loadScript(src){
  var script = document.createElement("script");     // creating a script element
  script.src = src;                   
  script.onload = function(){
    console.log("Loaded Script with SRC:" + src)
  }
  document.body.appendChild(script);              // append this script in body
}
loadScript("https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js");
*/
// here loadScript is a function with param src, loadScript is called giving the url i.e. src
// a script element is made and assigning src to it , then when script gets loaded console writes Loaded Script with SRC: link and appended script in body

// USING CALLBACK, now i want to not run func inside loadScript, instead we wanna run a custom func() and that we'll tell during the run-time
function loadScript(src,callback){
  var script = document.createElement("script");     // creating a script element
  script.src = src;                   
  script.onload = function(){
    console.log("Loaded Script with SRC:" + src);
    callback();           // the callback func given will be executed, here hello() executes
    // callback(src);           // giving an argument, so it now prints src too (passing func as argument)
  }
  document.body.appendChild(script);              // append this script in body
}
function hello(){
  alert("Hello World!");
  // alert("Hello World!" + src);
}
function goodMorning(){
  alert("Good Morning!");
  // alert("Good Morning!" + src);
}
loadScript("https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js",hello);
// here when loadscript func() is called, first it runs and also contains callback function i.e. hello() which it'll call after running

// HANDLING ERRORS
// Handling the error means when error comes while loading/execution, we handle the error and console prints ("Error loading script with SRC: " + src)
/* 
function loadScript(src, callback) {
  var script = document.createElement("script");
  script.src = src;
  script.onload = function() {
    console.log("Loaded script with SRC: " + src)
    callback(null, src);
  }
  script.onerror = function() {
    console.log("Error loading script with SRC: " + src);
    callback(new Error("Src got some error"))
  }
  document.body.appendChild(script);
}

function hello(error, src) {
  if (error) {
    console.log(error);
    return;
  }
  alert('Hello World!' + src);
}


function goodmorning(error, src) {
  
  if (error) {
    console.log(error);
    return;
  }
  alert('Good morning' + src);
}

loadScript("https://cdn.jsdelivr.net/npm/bootstrap@5.2.1/dist/js/bootstrap.bundle.min.js", goodmorning) 
*/